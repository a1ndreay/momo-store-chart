stages:
  - release
  - deploy

release_chart:
  stage: release
  image: alpine/helm:3
  script:
    - echo ${CI_API_V4_URL}
    - echo ${CI_PROJECT_ID}
    - apk add curl
    - cat values.yaml
    - helm lint . -f values.yaml
    - helm package .
    - curl -u ${NEXUS_HELM_REPO_USERNAME}:${NEXUS_HELM_REPO_PASSWORD} ${NEXUS_HELM_REPO} --upload-file ./*.tgz

deploy:
  stage: deploy
  image: alpine/helm:3
  when: manual
  variables:
    backend_target_version: "latest"
    frontend_target_version: "latest"
    fqdn: "std-ext-011-46.k8s.praktikum-services.tech"
    helm_release_name: "momo-store"
    helm_chart_name: "momo-store"
  before_script:
    - apk update && apk add envsubst  && apk add kubectl && apk add curl                                   # Установить wget и envsubst ( пакет gettext-base )   
    - mkdir ${HOME}/.kube
    - echo "${KUBECONFIG_CLUSTER_CERTIFICATE_AUTHORITY_DATA}" | base64 -d > ${HOME}/.kube/ca.pem
    - kubectl config set-cluster sa-test2 --certificate-authority=${HOME}/.kube/ca.pem --embed-certs --server=${KUBECONFIG_CLUSTER_CONTROLPLANE_ADDRESS}  
    - kubectl config set-credentials admin-user --token=${KUBECONFIG_USER_TOKEN}
    - kubectl config set-context default --cluster=sa-test2 --user=admin-user
    - kubectl config use-context default
    - curl https://ifconfig.co/json
    - kubectl get namespace    
    # - mkdir ${HOME}/.kube && envsubst < .kube/config.tmpl > ${HOME}/.kube/config                                      # Создаём kubeconfig из шаблона
    - export KUBECONFIG="${KUBECONFIG}:${HOME}/.kube/config"    
  script:
    - helm repo add nexus $NEXUS_HELM_REPO --username $NEXUS_HELM_REPO_USERNAME --password $NEXUS_HELM_REPO_PASSWORD
    - helm repo update
    - echo ${helm_release_name} nexus/${helm_chart_name} ${backend_target_version} ${frontend_target_version}
    - cat ~/.kube/config
    - |
      helm upgrade ${helm_release_name} nexus/${helm_chart_name} --set global.backend.version=${backend_target_version} \
       --set global.frontend.version=${frontend_target_version} \
       --set global.imageCredentials.registry=${DOCKER_REGISTRY_URL} \
       --set global.imageCredentials.username=${DOCKER_REGISTRY_USERNAME} \
       --set global.imageCredentials.password=${DOCKER_REGISTRY_PASSWORD} \
       --set global.imageCredentials.port=${DOCKER_REGISTRY_PORT} \
       --set global.backend.image=${BACKEND_REGISTRY_URL} \
       --set global.frontend.image=${FRONTEND_REGISTRY_URL} \
       --set global.frontend.fqdn=${fqdn} \
       --set global.alb.subnets=${ALB_SUBNETS} \
       --set global.alb.external_ipv4_address=${ALB_EXT_IPV4_ADDR} \
       --set global.alb.group_name=${ALB_GROUP_NAME} \
       --set global.cm.cert_id=${CM_CERT_ID}
       --atomic --install --timeout 10m --debug --namespace=${APP_INSTALL_ENVIRONMENT} --kubeconfig ~/.kube/config
  after_script:
    - rm ${HOME}/.kube/config ||true


